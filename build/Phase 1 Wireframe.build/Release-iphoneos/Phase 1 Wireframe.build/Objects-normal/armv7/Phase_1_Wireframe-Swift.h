// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import UIKit;
@import CoreGraphics;
@import AudioToolbox;
@import AVFoundation;
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
@class UIWindow;
@class UIApplication;
@class NSPersistentContainer;

SWIFT_CLASS("_TtC17Phase_1_Wireframe11AppDelegate")
@interface AppDelegate : UIResponder <UIApplicationDelegate>
@property (nonatomic, strong) UIWindow * _Nullable window;
- (BOOL)application:(UIApplication * _Nonnull)application didFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions SWIFT_WARN_UNUSED_RESULT;
- (void)applicationWillResignActive:(UIApplication * _Nonnull)application;
- (void)applicationDidEnterBackground:(UIApplication * _Nonnull)application;
- (void)applicationWillEnterForeground:(UIApplication * _Nonnull)application;
- (void)applicationDidBecomeActive:(UIApplication * _Nonnull)application;
- (void)applicationWillTerminate:(UIApplication * _Nonnull)application;
@property (nonatomic, strong) NSPersistentContainer * _Nonnull persistentContainer;
- (void)saveContext;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSCoder;

/// This type was created to ensure that all of the <code>UITextField</code> objects are created consistently. This class allows the developer to easily apply a ‘theme’ across all of the <code>GeneralUITextField</code> objects
SWIFT_CLASS("_TtC17Phase_1_Wireframe18GeneralUITextField")
@interface GeneralUITextField : UITextField
/// Customize appearance of the <code>UITextField</code> object when this function is called. The theme enforces the background, placeholder text, and typed in text colors. Furthermore, a specific font is applied to the text that appears in this <code>UITextField</code>. Background Color is set to <code>UIColor.CHARCOAL</code>. Placeholder Text Color is set to <code>UIColor.CREME</code>. Text Color is set to <code>UIColor.WHITE</code>. Font is set to <code>UIFont.TEXTFIELD</code>. This will ensure that all <code>GeneralUITextField</code> objects will have the same appearance.
- (void)awakeFromNib;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImage;
@class UIColor;

SWIFT_CLASS("_TtC17Phase_1_Wireframe17CustomUITextField")
@interface CustomUITextField : GeneralUITextField
@property (nonatomic, strong) UIImage * _Nullable leftImage;
@property (nonatomic) CGFloat leftPadding;
@property (nonatomic) CGFloat imageWidth;
@property (nonatomic, strong) UIColor * _Nonnull color;
- (CGRect)leftViewRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (void)awakeFromNib;
- (void)updateView;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSBundle;

/// This type was created to ensure that all of the <code>UIViewController</code> objects are created consistently. This class allows the developer to easily apply a ‘theme’ across all of the <code>GeneralUIViewController</code> objects
SWIFT_CLASS("_TtC17Phase_1_Wireframe23GeneralUIViewController")
@interface GeneralUIViewController : UIViewController
/// Customize appearance of the <code>UIViewController</code> object when this function is called. The theme enforces the background color as well as the appearance of the <code>navigationController</code> by calling <code>setBottomBorderColor</code> with <code>color (@param)</code> set to <code>UIColor.CREME</code> and <code>height (@param)</code> set to <code>0.25</code>. Finally it creates a new <code>UIBarButtonItem</code> such that the <code>Back Button</code> shows only an arrow to signifiy return.
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17Phase_1_Wireframe23DemoToolsViewController")
@interface DemoToolsViewController : GeneralUIViewController
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIButton;
@class RecordedAudioObject;
@class AVAudioPlayer;
@class AVAudioEngine;
@class AVAudioUnitEQ;

SWIFT_CLASS("_TtC17Phase_1_Wireframe23EqualizerViewController")
@interface EqualizerViewController : GeneralUIViewController
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified playButton;
@property (nonatomic, strong) RecordedAudioObject * _Null_unspecified recordedAudio;
@property (nonatomic, strong) AVAudioPlayer * _Null_unspecified audioPlayer;
@property (nonatomic, strong) AVAudioEngine * _Null_unspecified audioEngine;
@property (nonatomic) AudioUnit _Null_unspecified audioUnit;
@property (nonatomic, strong) AVAudioUnitEQ * _Null_unspecified equalizer;
/// Check if user recorded clip or if they want to use real-time recording. If a clip was recorded, <code>setupAudioPlayer</code> and <code>setupAudioEngine</code> are called consequently.
- (void)viewDidLoad;
/// <code>try</code> to create an <code>AVAudioPlayer</code> stored into <code>audioPlayer</code>.
- (void)setupAudioPlayer;
/// This function creates an <code>AVAudioEngine</code> stored in <code>audioEngine</code>. It next creates an <code>AVAudioPlayerNode</code> and attaches it to <code>audioEngine</code>. Finally <code>equalizer</code> is initialized to <code>AVAudioUnitEQ</code> with 14 bands.
- (void)setupAudioEngine;
- (IBAction)playAudio:(UIButton * _Nonnull)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// This type was created to ensure that all of the <code>UIButton</code> objects are created consistently. This class allows the developer to easily apply a ‘theme’ across all of the <code>GeneralUIButton</code> objects
SWIFT_CLASS("_TtC17Phase_1_Wireframe15GeneralUIButton")
@interface GeneralUIButton : UIButton
/// Customize appearance of the <code>UIButton</code> object when this function is called. The theme enforces the cornerRadius, backgroundColor, titleColor, and titleLabelFont to be consistent among all <code>GeneralUIButton</code> objects.
- (void)awakeFromNib;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// This type was created to ensure that all of the <code>UILabel</code> objects are created consistently. This class allows the developer to easily apply a ‘theme’ across all of the <code>GeneralUILabel</code> objects
SWIFT_CLASS("_TtC17Phase_1_Wireframe14GeneralUILabel")
@interface GeneralUILabel : UILabel
/// Customize appearance of the <code>UILabel</code> object when this function is called. The theme enforces the text color and font. This will ensure that all <code>GeneralUILabel</code> objects will have the same appearance.
- (void)awakeFromNib;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// This type was created to ensure that all of the <code>UITableView</code> objects are created consistently. This class allows the developer to easily apply a ‘theme’ across all of the <code>GeneralUITableView</code> objects
SWIFT_CLASS("_TtC17Phase_1_Wireframe18GeneralUITableView")
@interface GeneralUITableView : UITableView
/// Customize appearance of the <code>UITableView</code> object when this function is called. The theme enforces the seperatorStyle, estimatedRowHeight, allowsSelection and backgroundColor to be consistent among all <code>GeneralUITableView</code> objects.
- (void)awakeFromNib;
- (nonnull instancetype)initWithFrame:(CGRect)frame style:(UITableViewStyle)style OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// This type was created to ensure that all of the <code>UITableViewCell</code> objects are created consistently. This class allows the developer to easily apply a ‘theme’ across all of the <code>GeneralUITableViewCell</code> objects
SWIFT_CLASS("_TtC17Phase_1_Wireframe22GeneralUITableViewCell")
@interface GeneralUITableViewCell : UITableViewCell
/// Customize appearance of the <code>UITableViewCell</code> object when this function is called. The theme enforces the backgroundColor to be consistent among all <code>GeneralUITableViewCell</code> objects.
- (void)awakeFromNib;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end



@class UIImageView;

SWIFT_CLASS("_TtC17Phase_1_Wireframe21InitialViewController")
@interface InitialViewController : GeneralUIViewController
@property (nonatomic, weak) IBOutlet GeneralUIButton * _Null_unspecified createAccountButton;
@property (nonatomic, weak) IBOutlet GeneralUIButton * _Null_unspecified logInButton;
@property (nonatomic, weak) IBOutlet GeneralUIButton * _Null_unspecified demoToolsButton;
@property (nonatomic, weak) IBOutlet UIImageView * _Null_unspecified logoImageView;
@property (nonatomic, weak) IBOutlet GeneralUILabel * _Null_unspecified logoLabel;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17Phase_1_Wireframe19LoginViewController")
@interface LoginViewController : GeneralUIViewController
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIView;
@class AVAudioRecorder;
@class NSTimer;
@class NSArray;

/// A custom class that inherits from <code>GeneralUIViewController</code> and <code>AVAudioRecorderDelegate</code>. It was created to control the NoiseMeterView.
SWIFT_CLASS("_TtC17Phase_1_Wireframe24NoiseMeterViewController")
@interface NoiseMeterViewController : GeneralUIViewController <AVAudioRecorderDelegate>
/// A dynamic <code>GeneralUILabel</code> that displays the Noise Level
@property (nonatomic, weak) IBOutlet GeneralUILabel * _Null_unspecified noiseLevelLabel;
/// A static <code>GeneralUILabel</code> that displays the dB Unit
@property (nonatomic, weak) IBOutlet GeneralUILabel * _Null_unspecified dbLabel;
/// A static <code>GeneralUILabel</code> that captions the silent UIView
@property (nonatomic, weak) IBOutlet GeneralUILabel * _Null_unspecified silentLabel;
/// A static <code>GeneralUILabel</code> that captions the quiet UIView
@property (nonatomic, weak) IBOutlet GeneralUILabel * _Null_unspecified quietLabel;
/// A static <code>GeneralUILabel</code> that captions the average UIView
@property (nonatomic, weak) IBOutlet GeneralUILabel * _Null_unspecified averageLabel;
/// A static <code>GeneralUILabel</code> that captions the noisy UIView
@property (nonatomic, weak) IBOutlet GeneralUILabel * _Null_unspecified noisyLabel;
/// A static <code>GeneralUILabel</code> that captions the loud UIView
@property (nonatomic, weak) IBOutlet GeneralUILabel * _Null_unspecified loudLabel;
/// A static <code>UIView</code> that is colored <code>UIColor.BLUE</code> to represent the ‘silent’ noise range
@property (nonatomic, weak) IBOutlet UIView * _Null_unspecified noiseMeterViewOne;
/// A static <code>UIView</code> that is colored <code>UIColor.GREEN</code> to represent the ‘quiet’ noise range
@property (nonatomic, weak) IBOutlet UIView * _Null_unspecified noiseMeterViewTwo;
/// A static <code>UIView</code> that is colored <code>UIColor.PURPLE</code> to represent the ‘average’ noise range
@property (nonatomic, weak) IBOutlet UIView * _Null_unspecified noiseMeterViewThree;
/// A static <code>UIView</code> that is colored <code>UIColor.ORANGE</code> to represent the ‘noisy’ noise range
@property (nonatomic, weak) IBOutlet UIView * _Null_unspecified noiseMeterViewFour;
/// A static <code>UIView</code> that is colored <code>UIColor.RED</code> to represent the ‘loud’ noise range
@property (nonatomic, weak) IBOutlet UIView * _Null_unspecified noiseMeterViewFive;
/// The recorder object on which the noise meter relies.
@property (nonatomic, strong) AVAudioRecorder * _Nullable recorder;
/// A timer object to gathers noise data frequently.
@property (nonatomic, strong) NSTimer * _Nonnull levelTimer;
/// An array to store the recorded noise levels, this can be used to display a history graph of the past noise levels.
@property (nonatomic, strong) NSArray * _Nonnull dBs;
/// This function sets up custom UI Elements specific to this view then calls <code>setupAVAudioSession</code> to set up the audio session that measures noise.
- (void)viewDidLoad;
/// Creates an <code>AVAudioSession</code> as a <code>sharedInstance</code> then requests recording permission from the user. If the user allows recording, the <code>AVAudioSession</code> has settings changed and the <code>record</code> method is called.
- (void)setupAVAudioSession;
/// A function that allows the <code>recorder</code> to record storing the file at <code>filename (@param)</code>, with settings <code>settings (@param)</code>, a flag to determine if the recording should be metered, and a timeInterval for <code>levelTimer</code>.
- (void)recordWithFilename:(NSString * _Nonnull)filename settings:(NSDictionary<NSString *, NSNumber *> * _Nonnull)settings metered:(BOOL)metered timeIntervalForResults:(NSTimeInterval)timeIntervalForResults;
/// The callback function for <code>levelTimer</code>. This allows the view to be updated with the new noise levels: <code>recorder</code> calls <code>updateMeters</code> and <code>updateLabels</code> is called to update the view.
- (void)levelTimerCallback;
/// This function changes the text in the <code>noiseLevelLabel</code> and sets the color of the text based on the <code>NoiseMeterColors</code>.
- (void)updateLabelsWithDB:(float)dB;
/// Converts from Apple standard noise levels to the universally used decibel system. Changes values from a linear [-160, 0] scale to a logrithmic [0, 120] scale.
- (float)convertToDecibelWithOriginalValue:(float)originalValue SWIFT_WARN_UNUSED_RESULT;
/// This function sets up the different small <code>UIViews</code> that create the NoiseMeter at the top of this <code>UIView</code>. Also sets the font for the labels that describe each color of the meter.
- (void)setupNoiseMeter;
/// Ensures that when the recording ends a sucess or failure flag is sent to <code>recordingEnded</code> function.
- (void)audioRecorderDidFinishRecording:(AVAudioRecorder * _Nonnull)recorder successfully:(BOOL)flag;
/// Prints whether or not the recording session ended correctly.
- (void)recordingEndedWithSuccess:(BOOL)success;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17Phase_1_Wireframe19RecordedAudioObject")
@interface RecordedAudioObject : NSObject
@property (nonatomic, copy) NSURL * _Null_unspecified filePathUrl;
@property (nonatomic, copy) NSString * _Null_unspecified title;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIStoryboardSegue;

SWIFT_CLASS("_TtC17Phase_1_Wireframe22RecorderViewController")
@interface RecorderViewController : GeneralUIViewController <AVAudioRecorderDelegate>
/// The <code>UIButton</code> to start recording.
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified recordButton;
/// The <code>UIButton</code> to stop recording.
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified stopButton;
/// The <code>GeneralUILabel</code> that displays if in record mode.
@property (nonatomic, weak) IBOutlet GeneralUILabel * _Null_unspecified recordingLabel;
/// The `AVAudioRecorder’ that performs recording from the microphone.
@property (nonatomic, strong) AVAudioRecorder * _Nullable recorder;
/// The `RecordedAudioObject’ object to store information of the user’s recording.
@property (nonatomic, strong) RecordedAudioObject * _Null_unspecified recordedAudio;
/// Hide <code>stopButton</code> and <code>recordingLabel</code>. Change tint colors for <code>recordButton</code> and <code>stopButton</code>. Set all dynamic <code>UIButton's imageView's contentMode</code> to <code>.scaleAspectFit</code>.
- (void)viewWillAppear:(BOOL)animated;
/// Set the state and font of the <code>recordingLabel</code>. Call <code>setupAVAudioSession</code> to initiate the recording process.
- (void)viewDidLoad;
/// Overridden to send <code>RecordedAudioObject</code> to the next <code>GeneralUIViewController</code> that we are seguing to. In this case the only possible segue is to <code>EqualizerViewController</code>.
- (void)prepareForSegue:(UIStoryboardSegue * _Nonnull)segue sender:(id _Nullable)sender;
/// Creates an <code>AVAudioSession</code> as a <code>sharedInstance</code> then requests recording permission from the user. If the user allows recording, the <code>AVAudioSession</code> has settings changed and the <code>record</code> method is called.
- (void)setupAVAudioSession;
/// A function that allows the <code>recorder</code> to record storing the file at <code>filename (@param)</code>, with settings <code>settings (@param)</code>, a flag to determine if the recording should be metered, and a timeInterval for <code>levelTimer</code>.
- (void)recordWithFilename:(NSString * _Nonnull)filename settings:(NSDictionary<NSString *, NSNumber *> * _Nonnull)settings metered:(BOOL)metered timeIntervalForResults:(NSTimeInterval)timeIntervalForResults;
/// Ensures that when the recording ends a sucess or failure flag is sent to <code>recordingEnded</code> function.
- (void)audioRecorderDidFinishRecording:(AVAudioRecorder * _Nonnull)recorder successfully:(BOOL)flag;
/// If the recording succeeded store the URL of the recorded clip then call <code>performeSegue</code>. Else notify the user that recording failed.
- (void)recordingEndedWithSuccess:(BOOL)success;
/// Toggle the state - this function handles the logic of switching the state. Hiding and unhiding different views.
- (IBAction)toggleRecording:(UIButton * _Nonnull)sender;
/// Stop recording. Calls the <code>stop</code> function.
- (IBAction)stopRecording:(UIButton * _Nonnull)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17Phase_1_Wireframe19SignUpTableViewCell")
@interface SignUpTableViewCell : GeneralUITableViewCell
@property (nonatomic, weak) IBOutlet UIButton * _Nullable button;
@property (nonatomic, weak) IBOutlet UILabel * _Nullable label;
@property (nonatomic, weak) IBOutlet CustomUITextField * _Nullable textField;
- (void)awakeFromNib;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17Phase_1_Wireframe20SignUpViewController")
@interface SignUpViewController : GeneralUIViewController <UITableViewDelegate, UITableViewDataSource>
@property (nonatomic, weak) IBOutlet GeneralUITableView * _Null_unspecified signUpTableView;
- (void)viewDidLoad;
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface UIColor (SWIFT_EXTENSION(Phase_1_Wireframe))
/// Defined as <code>Isabelline</code> in the color palette. This is the lightest color that is used for most text.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull WHITE;)
+ (UIColor * _Nonnull)WHITE SWIFT_WARN_UNUSED_RESULT;
/// Defined as <code>Silver Chalice</code> in the color palette. This is the next color after <code>Isabelline</code> and is used as a highlight color for the <code>UINavigationBar</code> as well as heading text (i.e. large text).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull CREME;)
+ (UIColor * _Nonnull)CREME SWIFT_WARN_UNUSED_RESULT;
/// Defined as <code>Outter Space</code> in the color palette. This is the next color after <code>Silver Chalice</code> and is used as the background color for <code>GeneralUITextField</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull CHARCOAL;)
+ (UIColor * _Nonnull)CHARCOAL SWIFT_WARN_UNUSED_RESULT;
/// Defined as <code>Gunmetal</code> in the color palette. This is the next color after <code>Outter Space</code> and is used as the background color for all of the <code>UIViews</code> in <code>UIViewControllers</code> of type <code>GeneralUIViewController</code>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull BACKGROUND;)
+ (UIColor * _Nonnull)BACKGROUND SWIFT_WARN_UNUSED_RESULT;
/// Defined as <code>Raisin Black</code> in the color palette. This is the next color after <code>Gunmetal</code> and is used as the text color <code>GeneralUILabel</code> found on light backgrounds or more particularly for the <code>LoginButton</code> found on the main page of this application.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull BLACK;)
+ (UIColor * _Nonnull)BLACK SWIFT_WARN_UNUSED_RESULT;
/// Defined as <code>Light Red Ochire</code> in the color palette. This color replaces all <code>Red</code> in the application. It can be used as a <code>GeneralUIButton</code> color, or <code>UIView</code>. This can be seen in the <code>NoiseMeter</code> where this color indicates the loudest audio decibal range.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull RED;)
+ (UIColor * _Nonnull)RED SWIFT_WARN_UNUSED_RESULT;
/// Defined as <code>Very Light Malachite Green</code> in the color palette. This color replaces all <code>Green</code> in the application. It can be used as a <code>GeneralUIButton</code> color, or <code>UIView</code>. This can be seen in the <code>NoiseMeter</code> where this color indicates an audio decibal range.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull GREEN;)
+ (UIColor * _Nonnull)GREEN SWIFT_WARN_UNUSED_RESULT;
/// Defined as <code>Pale Violet</code> in the color palette. This color replaces all <code>Purple</code> in the application. It can be used as a <code>GeneralUIButton</code> color, or <code>UIView</code>. This can be seen in the <code>NoiseMeter</code> where this color indicates an audio decibal range.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull PURPLE;)
+ (UIColor * _Nonnull)PURPLE SWIFT_WARN_UNUSED_RESULT;
/// Defined as <code>Maya Blue</code> in the color palette. This color replaces all <code>Blue</code> in the application. It can be used as a <code>GeneralUIButton</code> color, or <code>UIView</code>. This can be seen in the <code>NoiseMeter</code> where this color indicates an audio decibal range.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull BLUE;)
+ (UIColor * _Nonnull)BLUE SWIFT_WARN_UNUSED_RESULT;
/// Defined as <code>Macaroni and Cheese</code> in the color palette. This color replaces all <code>Orange</code> in the application. It can be used as a <code>GeneralUIButton</code> color, or <code>UIView</code>. This can be seen in the <code>NoiseMeter</code> where this color indicates an audio decibal range.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull ORANGE;)
+ (UIColor * _Nonnull)ORANGE SWIFT_WARN_UNUSED_RESULT;
/// This is the official color designated by Facebook as their Facebook-Blue. This color was used as the background for the custom Facebook <code>GeneralUIButton</code> that shows up on the Login and Create Account <code>ViewControllers</code>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull FB_BLUE;)
+ (UIColor * _Nonnull)FB_BLUE SWIFT_WARN_UNUSED_RESULT;
/// This is the official color designated by Google as their Google-Red. This color was used as the background for the custom Google <code>GeneralUIButton</code> that shows up on the Login and Create Account <code>ViewControllers</code>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull GOOGLE_RED;)
+ (UIColor * _Nonnull)GOOGLE_RED SWIFT_WARN_UNUSED_RESULT;
@end


@interface UIFont (SWIFT_EXTENSION(Phase_1_Wireframe))
/// This is the default font that is used by <code>GeneralUIButton</code> objects.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull BUTTON;)
+ (UIFont * _Nonnull)BUTTON SWIFT_WARN_UNUSED_RESULT;
/// This is the default font that is used by <code>GeneralUILabel</code> objects.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull LABEL;)
+ (UIFont * _Nonnull)LABEL SWIFT_WARN_UNUSED_RESULT;
/// This is the default font that is used by <code>GeneralUITextField</code> objects.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull TEXTFIELD;)
+ (UIFont * _Nonnull)TEXTFIELD SWIFT_WARN_UNUSED_RESULT;
/// This is the font that is used by text that appears under the logo on the <code>InitialViewController</code>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull LOGO;)
+ (UIFont * _Nonnull)LOGO SWIFT_WARN_UNUSED_RESULT;
/// This is the font that is used by <code>NoiseMeterViewController</code> to display the Noise Level in Decibels.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull LARGE;)
+ (UIFont * _Nonnull)LARGE SWIFT_WARN_UNUSED_RESULT;
/// This is the font that is used by <code>NoiseMeterViewController</code> to caption the different colors in the Noise Meter.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIFont * _Nonnull CAPTION;)
+ (UIFont * _Nonnull)CAPTION SWIFT_WARN_UNUSED_RESULT;
@end


@interface UINavigationBar (SWIFT_EXTENSION(Phase_1_Wireframe))
/// Creates a ‘bottom border’ for the <code>UINavigationBar</code> by creating a new <code>UIView</code> of height <code>height (@param)</code>, setting its background color to <code>color (@param)</code> adding it as a subview.
- (void)setBottomBorderColorWithColor:(UIColor * _Nonnull)color height:(CGFloat)height;
@end

#pragma clang diagnostic pop
